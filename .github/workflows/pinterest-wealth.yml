name: Advanced Pinterest Diversity Engine (improved)

on:
  schedule:
    # Cron zamanları GITHub Actions için UTC'dir. Aşağıdaki yorumlar Istanbul (+03:00) saatine göre verilmiştir.
    - cron: '0 8 * * *'   # 11:00 (sabah gönderisi)
    - cron: '0 15 * * *'  # 18:00 (akşam gönderisi)
    - cron: '8 11 * * 5'     # Cuma 14:08
    - cron: '35 16 * * 6'    # Cumartesi 19:35
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  pinterest-diverse:
    runs-on: ubuntu-latest
    # Kısa ve kesin bir job timeout. Uzun beklemeler runner maliyetini ve hataları artırır.
    timeout-minutes: 30

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow urllib3

    - name: Create workspace for state
      run: |
        mkdir -p .pinterest_state

    - name: Ultra Diverse Pinterest Content (script)
      env:
        IFTTT_KEY: ${{ secrets.IFTTT_KEY }}
        IFTTT_EVENT: ${{ secrets.IFTTT_EVENT }}
        WEBSITE_URL: ${{ secrets.WEBSITE_URL }}
        ACCOUNT_AGE_DAYS: 30  # Hesap yaşı (gün) — gerekirse secret olarak saklayın
        STATE_DIR: .pinterest_state
      run: |
        set -euo pipefail
        python << 'PY'
        # -*- coding: utf-8 -*-
        """
        Geliştirilmiş: Daha güvenli, daha dayanıklı ve runner dostu.
        - requests.Session + retry
        - IFTTT retry/backoff
        - state (posted prompts) persist: .pinterest_state/posted.json
        - kısaltılmış beklemeler (runner timeout uyumlu)
        - kritik hatalarda temiz log ve non-zero exit
        """
        import os
        import sys
        import time
        import json
        import random
        import hashlib
        from datetime import datetime
        import urllib.parse
        import requests
        from pathlib import Path
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry

        STATE_DIR = Path(os.environ.get('STATE_DIR', '.pinterest_state'))
        STATE_DIR.mkdir(parents=True, exist_ok=True)
        POSTED_FILE = STATE_DIR / 'posted.json'

        # --------- Helper: persistent posted prompts (simple file-based state) ---------
        def load_posted():
            if POSTED_FILE.exists():
                try:
                    return set(json.loads(POSTED_FILE.read_text()))
                except Exception:
                    return set()
            return set()

        def save_posted(posted_set):
            try:
                POSTED_FILE.write_text(json.dumps(list(posted_set)))
            except Exception as e:
                print(f"⚠️ State save failed: {e}")

        # --------- HTTP session with retries ---------
        def create_session(retries=3, backoff_factor=0.6, status_forcelist=(500,502,503,504)):
            s = requests.Session()
            retry = Retry(
                total=retries,
                read=retries,
                connect=retries,
                backoff_factor=backoff_factor,
                status_forcelist=status_forcelist,
                allowed_methods=["GET","POST"]
            )
            adapter = HTTPAdapter(max_retries=retry)
            s.mount('https://', adapter)
            s.mount('http://', adapter)
            s.headers.update({'User-Agent': 'adv-pinterest-engine/1.0'})
            return s

        session = create_session()

        # --------- Basic config checks ---------
        IFTTT_KEY = os.environ.get('IFTTT_KEY')
        IFTTT_EVENT = os.environ.get('IFTTT_EVENT') or 'pinterest_paylas'
        WEBSITE_URL = os.environ.get('WEBSITE_URL', '').strip()

        if not IFTTT_KEY:
            print('❌ IFTTT_KEY eksik. Lütfen secrets.IFTTT_KEY ekleyin.')
            sys.exit(2)

        if not WEBSITE_URL:
            print('⚠️ WEBSITE_URL yok. Devam ediyoruz ama description içinde link olmayacak.')

        # --------- Safe pin count (aynı mantık, ancak runner uyumlu beklemeler) ---------
        def calculate_safe_pin_count():
            account_age = int(os.environ.get('ACCOUNT_AGE_DAYS', 1))
            if account_age < 7:
                max_daily_pins = 2
            elif account_age < 14:
                max_daily_pins = 4
            elif account_age < 30:
                max_daily_pins = 8
            elif account_age < 60:
                max_daily_pins = 12
            elif account_age < 90:
                max_daily_pins = 15
            else:
                max_daily_pins = 20

            pins_today = random.randint(0, max(0, max_daily_pins - 5))
            remaining_pins = max_daily_pins - pins_today
            if remaining_pins <= 0:
                return 0
            pins_this_run = min(remaining_pins, random.randint(1, 3))
            return pins_this_run

        # --------- Simplified content library (or keep your full library) ---------
        mega_content_library = {
            # (kısaltıldı — gerçek kullanımda orijinali kullanın)
            "morning_motivation": {"themes": ["sunrise over mountains with inspirational quote space"], "styles":["energizing"], "moods":["determined"]},
            "financial_education": {"themes": ["clean desk with budget planner and colorful charts"], "styles":["educational"], "moods":["helpful"]},
            "luxury_lifestyle": {"themes": ["modern minimalist mansion with infinity pool overlooking city skyline at golden hour"], "styles":["luxurious"], "moods":["inspiring"]}
        }

        visual_variations = {
            'color_palettes': ['warm golden tones with cream and beige','cool blues with white and silver accents'],
            'lighting_styles': ['soft morning light through window','golden hour warm side lighting'],
            'compositions': ['rule of thirds balanced layout','centered symmetrical composition'],
            'textures': ['smooth marble surfaces','soft fabric textures']
        }

        # --------- Prompt generator (keeps original randomness) ---------
        def generate_unique_prompt():
            category = random.choice(list(mega_content_library.keys()))
            content = mega_content_library[category]
            theme = random.choice(content['themes'])
            color = random.choice(visual_variations['color_palettes'])
            lighting = random.choice(visual_variations['lighting_styles'])
            composition = random.choice(visual_variations['compositions'])
            texture = random.choice(visual_variations['textures'])
            style = random.choice(content['styles'])
            mood = random.choice(content['moods'])
            time_of_day = random.choice(['early morning','midday','afternoon','golden hour','blue hour'])
            weather = random.choice(['clear sky','soft clouds'])
            season = random.choice(['spring','summer','autumn','winter'])
            prompt = f"{theme}, {color}, {lighting}, {composition}, {style} style, {mood} mood, {time_of_day}, {random.choice(['high quality','8k resolution','professional photography'])}, no text, no watermarks, vertical format"
            return prompt, category

        def generate_unique_content(category):
            title = f"Tip of the Day #{random.randint(1,999)} 💡"
            intro = random.choice(["Here's something I learned today:", "Reminder for myself (and you):"]) 
            body = random.choice(["Every small step counts towards your bigger goals.", "Consistency beats perfection every single time."])
            cta = random.choice(["What's your goal today?","Share with someone who needs this."])
            description = f"{intro} {body} {cta}"
            if WEBSITE_URL:
                description += f"\n\n→ More at {WEBSITE_URL}"
            hashtags = "#motivation #inspiration #goals"
            return title, description + "\n\n" + hashtags

        # --------- Image generation (external service) ---------
        def create_diverse_image(prompt):
            # Pollinations kullandınız; 3rd-party endpoint'ler değişken olabilir.
            encoded = urllib.parse.quote(prompt)
            timestamp = int(datetime.now().timestamp() * 1000)
            random_component = random.randint(1, 999999999)
            prompt_hash = abs(hash(prompt))
            super_seed = (timestamp + random_component + prompt_hash) % 100000000
            size = random.choice([(1000,1500),(1080,1620),(800,1200)])
            image_url = f"https://image.pollinations.ai/prompt/{encoded}?width={size[0]}&height={size[1]}&seed={super_seed}&nologo=true&enhance=true"
            return image_url, super_seed

        # --------- Send to IFTTT with backoff ---------
        def send_to_pinterest(image_url, title, description):
            event_name = IFTTT_EVENT
            ifttt_url = f"https://maker.ifttt.com/trigger/{event_name}/with/key/{IFTTT_KEY}"
            payload = {"value1": image_url, "value2": title, "value3": description}
            # exponential backoff retries
            for attempt in range(4):
                try:
                    r = session.post(ifttt_url, json=payload, timeout=20)
                    if r.status_code == 200:
                        return True
                    # detect rate-limit-ish messages
                    text = (r.text or '').lower()
                    if 'limit' in text or r.status_code in (429, 503):
                        sleep = (2 ** attempt) + random.random()
                        print(f"⚠️ IFTTT rate or service issue (status {r.status_code}). Backing off {sleep:.1f}s")
                        time.sleep(sleep)
                        continue
                    print(f"❌ IFTTT HTTP {r.status_code}: {r.text[:200]}")
                    return False
                except requests.RequestException as e:
                    sleep = (2 ** attempt) + random.random()
                    print(f"⚠️ Network error -> {e}. Retrying in {sleep:.1f}s")
                    time.sleep(sleep)
            return False

        def log_pin(entry):
            LOG_FILE = STATE_DIR / 'run.log'
            try:
                LOG_FILE.write_text((LOG_FILE.read_text() if LOG_FILE.exists() else '') + json.dumps(entry) + '\n')
            except Exception:
                pass

        def smart_posting_system():
            posted = load_posted()
            pins_to_post = calculate_safe_pin_count()
            if pins_to_post == 0:
                print('📌 Bugünlük limit dolu veya 0 pin. Çıkılıyor.')
                return
            print(f"🎯 Bu çalıştırmada paylaşılacak pin sayısı: {pins_to_post}")
            for i in range(pins_to_post):
                # kısa, runner-dostu rastgele bekleme
                if i > 0:
                    wait_time = random.uniform(3, 12)
                    print(f"⏳ {wait_time:.1f}s bekleniyor (bot davranışı simülasyonu)")
                    time.sleep(wait_time)
                attempt = 0
                prompt = None
                while attempt < 8:
                    prompt, category = generate_unique_prompt()
                    checksum = str(abs(hash(prompt)))
                    if checksum not in posted:
                        posted.add(checksum)
                        break
                    attempt += 1
                if not prompt:
                    print('🔁 Benzersiz prompt bulunamadı, atlanıyor.')
                    continue
                print(f"📂 Kategori: {category} | Prompt checksum: {checksum[:8]}")
                image_url, seed = create_diverse_image(prompt)
                title, description = generate_unique_content(category)
                success = send_to_pinterest(image_url, title, description)
                entry = {"timestamp": datetime.now().isoformat(), "category": category, "seed": seed, "success": success}
                log_pin(entry)
                print(f"✅ Pin {'başarılı' if success else 'başarısız'}: {title}")
            save_posted(posted)

        def main():
            print('=== ADVANCED PINTEREST DIVERSITY ENGINE - improved ===')
            print(datetime.now().isoformat())
            smart_posting_system()
            print('=== İŞLEM TAMAMLANDI ===')

        if __name__ == '__main__':
            main()
        PY

    - name: Upload logs & state as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pinterest-state-and-logs
        path: .pinterest_state

    - name: Summary Report
      if: success()
      run: |
        echo "================================"
        echo "📊 PINTEREST AUTOMATION REPORT"
        echo "================================"
        echo "✅ Görev tamamlandı"
        echo "📌 Çeşitlilik maksimize edildi (yine de sınırlarla)"
        echo "🔒 Güvenlik önlemleri: IFTTT key kullanıldı, secrets kullanıldı"
        echo "📈 Hesap sağlığı korunuyor (günlük limit kontrolü)"
        echo "🎯 Event: ${{ secrets.IFTTT_EVENT }}"
        echo "================================"

    - name: Failure report
      if: failure()
      run: |
        echo "================================"
        echo "❌ PINTEREST AUTOMATION FAILURE"
        echo "Check artifacts: pinterest-state-and-logs"
        echo "================================"
