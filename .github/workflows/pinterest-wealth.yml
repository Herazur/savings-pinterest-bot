name: Advanced Pinterest Diversity Engine (improved)

on:
  schedule:
    # Cron zamanları GITHub Actions için UTC'dir. Aşağıdaki yorumlar Istanbul (+03:00) saatine göre verilmiştir.
    - cron: '0 8 * * *'   # 11:00 (sabah gönderisi)
    - cron: '0 15 * * *'  # 18:00 (akşam gönderisi)
    - cron: '8 11 * * 5'     # Cuma 14:08
    - cron: '35 16 * * 6'    # Cumartesi 19:35
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  pinterest-diverse:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow urllib3

    - name: Create workspace for state
      run: |
        mkdir -p .pinterest_state

    - name: Ultra Diverse Pinterest Content (script)
      env:
        IFTTT_KEY: ${{ secrets.IFTTT_KEY }}
        IFTTT_EVENT: ${{ secrets.IFTTT_EVENT }}
        WEBSITE_URL: https://savetracker.site/
        ACCOUNT_AGE_DAYS: 30
        STATE_DIR: .pinterest_state
      run: |
        set -euo pipefail
        python << 'PY'
        # -*- coding: utf-8 -*-
        """
        Pinterest için optimize edilmiş, text'siz, yüksek kaliteli görsel promptları
        Saving/tasarruf temasına odaklanmış
        """
        import os
        import sys
        import time
        import json
        import random
        import hashlib
        from datetime import datetime
        import urllib.parse
        import requests
        from pathlib import Path
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry

        STATE_DIR = Path(os.environ.get('STATE_DIR', '.pinterest_state'))
        STATE_DIR.mkdir(parents=True, exist_ok=True)
        POSTED_FILE = STATE_DIR / 'posted.json'

        def load_posted():
            if POSTED_FILE.exists():
                try:
                    return set(json.loads(POSTED_FILE.read_text()))
                except Exception:
                    return set()
            return set()

        def save_posted(posted_set):
            try:
                POSTED_FILE.write_text(json.dumps(list(posted_set)))
            except Exception as e:
                print(f"⚠️ State save failed: {e}")

        def create_session(retries=3, backoff_factor=0.6, status_forcelist=(500,502,503,504)):
            s = requests.Session()
            retry = Retry(
                total=retries,
                read=retries,
                connect=retries,
                backoff_factor=backoff_factor,
                status_forcelist=status_forcelist,
                allowed_methods=["GET","POST"]
            )
            adapter = HTTPAdapter(max_retries=retry)
            s.mount('https://', adapter)
            s.mount('http://', adapter)
            s.headers.update({'User-Agent': 'adv-pinterest-engine/1.0'})
            return s

        session = create_session()

        IFTTT_KEY = os.environ.get('IFTTT_KEY')
        IFTTT_EVENT = os.environ.get('IFTTT_EVENT') or 'pinterest_paylas'
        WEBSITE_URL = os.environ.get('WEBSITE_URL', '').strip()

        if not IFTTT_KEY:
            print('❌ IFTTT_KEY eksik. Lütfen secrets.IFTTT_KEY ekleyin.')
            sys.exit(2)

        if not WEBSITE_URL:
            print('⚠️ WEBSITE_URL yok. Devam ediyoruz ama description içinde link olmayacak.')

        def calculate_safe_pin_count():
            account_age = int(os.environ.get('ACCOUNT_AGE_DAYS', 1))
            if account_age < 7:
                max_daily_pins = 2
            elif account_age < 14:
                max_daily_pins = 4
            elif account_age < 30:
                max_daily_pins = 8
            elif account_age < 60:
                max_daily_pins = 12
            elif account_age < 90:
                max_daily_pins = 15
            else:
                max_daily_pins = 20

            pins_today = random.randint(0, max(0, max_daily_pins - 5))
            remaining_pins = max_daily_pins - pins_today
            if remaining_pins <= 0:
                return 0
            pins_this_run = min(remaining_pins, random.randint(1, 3))
            return pins_this_run

        # YENİ: Pinterest'te viral olan, text'siz, kaliteli görsel promptları
        mega_content_library = {
            "piggy_bank_aesthetic": {
                "themes": [
                    "ceramic piggy bank surrounded by gold coins on marble surface",
                    "pink ceramic piggy bank with scattered coins in soft natural light",
                    "vintage glass jar filled with coins and dollar bills",
                    "elegant piggy bank on wooden desk with green plants",
                    "modern white piggy bank with eucalyptus leaves decoration"
                ],
                "styles": ["minimalist", "aesthetic", "cozy"],
                "moods": ["calm", "hopeful", "inspiring"]
            },
            "money_jar_goals": {
                "themes": [
                    "mason jar filled with rolled money and coins with soft bokeh background",
                    "glass savings jar overflowing with paper money on rustic wooden table",
                    "transparent jar with coins stacked inside on white background",
                    "vintage savings jar with ribbon tied around neck filled with cash",
                    "multiple glass jars with different amounts of money on shelf"
                ],
                "styles": ["rustic", "clean", "organic"],
                "moods": ["motivating", "positive", "warm"]
            },
            "coin_stacking_wealth": {
                "themes": [
                    "perfectly stacked coins creating ascending towers on dark surface",
                    "gold and silver coins arranged in growing stacks",
                    "coins stacked in pyramid formation with blurred background",
                    "ascending coin stacks with plant growing from top stack",
                    "multiple coin towers of different heights on marble surface"
                ],
                "styles": ["elegant", "professional", "symbolic"],
                "moods": ["ambitious", "determined", "focused"]
            },
            "wallet_minimalism": {
                "themes": [
                    "sleek leather wallet with cash peeking out on clean background",
                    "minimalist wallet with credit cards on marble table",
                    "open wallet showing organized bills and cards flat lay",
                    "brown leather wallet with green plant leaves beside it",
                    "modern minimalist wallet on white surface with shadow"
                ],
                "styles": ["minimalist", "modern", "clean"],
                "moods": ["organized", "sophisticated", "simple"]
            },
            "cash_envelope_system": {
                "themes": [
                    "pastel colored envelopes with cash visible inside arranged neatly",
                    "kraft paper envelopes filled with money in organized row",
                    "white envelopes with different amounts of cash on wooden surface",
                    "colorful labeled envelopes for budget categories flat lay",
                    "vintage style envelopes with money on marble countertop"
                ],
                "styles": ["organized", "aesthetic", "practical"],
                "moods": ["systematic", "neat", "empowering"]
            },
            "plant_growth_metaphor": {
                "themes": [
                    "small plant growing from pile of coins in sunlight",
                    "money tree with coins as leaves in modern pot",
                    "succulent plant in pot surrounded by scattered coins",
                    "young plant sprouting with coins buried in soil",
                    "green plant growing through stack of money bills"
                ],
                "styles": ["symbolic", "natural", "hopeful"],
                "moods": ["growth-focused", "optimistic", "inspiring"]
            },
            "luxury_lifestyle_goals": {
                "themes": [
                    "champagne glass with gold coins on marble surface",
                    "luxury watch on velvet cushion with soft lighting",
                    "designer handbag with jewelry on elegant vanity",
                    "keys to luxury car on marble table with flowers",
                    "passport with international currency and travel items"
                ],
                "styles": ["luxurious", "aspirational", "elegant"],
                "moods": ["dreamy", "motivating", "sophisticated"]
            },
            "financial_flat_lay": {
                "themes": [
                    "flat lay of cash, calculator, and coffee cup on white background",
                    "money, phone, and minimal accessories arranged aesthetically",
                    "bills and coins arranged in circular pattern from above",
                    "cash spread out with gold accessories on marble surface",
                    "money with fresh flowers and jewelry organized flat lay"
                ],
                "styles": ["aesthetic", "organized", "modern"],
                "moods": ["inspiring", "clean", "focused"]
            }
        }

        visual_variations = {
            'color_palettes': [
                'soft pastels with cream and white',
                'warm earth tones with beige and brown',
                'minimalist white with gold accents',
                'sage green with natural wood tones',
                'blush pink with marble and gold',
                'navy blue with silver accents',
                'neutral grays with pops of green'
            ],
            'lighting_styles': [
                'soft natural window light from left',
                'golden hour warm glow',
                'bright even daylight',
                'soft diffused overhead lighting',
                'dramatic side lighting with shadows',
                'backlit with gentle rim light'
            ],
            'compositions': [
                'centered symmetrical layout',
                'rule of thirds balanced composition',
                'flat lay from directly above',
                'slight overhead angle showing depth',
                'diagonal arrangement creating movement'
            ],
            'textures': [
                'smooth marble surface',
                'rustic wooden table',
                'soft linen fabric background',
                'clean white backdrop',
                'natural stone texture'
            ]
        }

        def generate_unique_prompt():
            category = random.choice(list(mega_content_library.keys()))
            content = mega_content_library[category]
            theme = random.choice(content['themes'])
            color = random.choice(visual_variations['color_palettes'])
            lighting = random.choice(visual_variations['lighting_styles'])
            composition = random.choice(visual_variations['compositions'])
            texture = random.choice(visual_variations['textures'])
            style = random.choice(content['styles'])
            mood = random.choice(content['moods'])
            
            quality_boosters = [
                'professional photography',
                'high resolution 8k',
                'sharp focus',
                'studio quality',
                'pinterest aesthetic'
            ]
            
            # TEXT OLMASIN diye özel vurgu
            prompt = f"{theme}, {color}, {lighting}, {composition}, {texture}, {style} style, {mood} mood, {random.choice(quality_boosters)}, no text, no words, no letters, no numbers visible, no watermarks, vertical pinterest format, clean aesthetic"
            
            return prompt, category

        def generate_unique_content(category):
            # Çeşitli başlıklar
            titles = [
                "Money Saving Tip 💰",
                "Financial Freedom ✨",
                "Savings Goal 🎯",
                "Smart Money 💡",
                "Budget Goals 🌟",
                "Wealth Building 📈",
                "Save Money 💚",
                "Financial Wellness ☘️",
                "Money Matters 💵",
                "Financial Success 🏆",
                "Saving Strategy 🧠",
                "Money Management 📊"
            ]
            
            # Daha uzun ve çeşitli açıklamalar
            intros = [
                "💭 Quick tip:",
                "✨ Did you know?",
                "🎯 Pro tip:",
                "💡 Money wisdom:",
                "🌟 Remember:",
                "📈 Success tip:",
                "💚 Daily reminder:",
                "⚡ Financial hack:"
            ]
            
            bodies = [
                "Every small amount you save today builds your financial security for tomorrow.",
                "Consistency in saving beats perfection every single time - start with what you can.",
                "Your savings account isn't just money, it's your peace of mind and future opportunities.",
                "The secret to building wealth? Small daily habits that compound over time.",
                "Saving money isn't about restriction, it's about creating the life you want.",
                "Financial freedom starts with the decision to save even when it feels small.",
                "Every dollar saved is a vote for your future self and your dreams.",
                "Building wealth is a marathon, not a sprint - celebrate every small win.",
                "Your financial journey is unique - compare yourself only to your past self.",
                "Smart money management today creates endless possibilities tomorrow.",
                "Saving is self-care for your future - you deserve financial stability.",
                "Small sacrifices today lead to big celebrations in your future."
            ]
            
            ctas = [
                "What's your savings goal?",
                "Start your journey today!",
                "Double tap if saving!",
                "Share this with a friend",
                "Follow for more tips",
                "Comment your goal below",
                "Save this for later",
                "Tag someone who needs this"
            ]
            
            hashtags_list = [
                "#moneysavingtips #financialfreedom #budgeting #personalfinance",
                "#savingmoney #financialliteracy #moneygoals #wealthbuilding",
                "#financetips #moneymindset #savingsgoals #smartmoney",
                "#budgetingtips #financialwellness #moneytips #savingsplan",
                "#moneymanagement #financialsuccess #savingsmotivation #moneymatters",
                "#financialindependence #moneysaver #budgetlife #wealthmindset"
            ]
            
            title = random.choice(titles)
            intro = random.choice(intros)
            body = random.choice(bodies)
            cta = random.choice(ctas)
            hashtags = random.choice(hashtags_list)
            
            # Uzun description (link + hashtag dahil)
            description = f"{intro} {body} {cta}\n\n💻 More tips: {WEBSITE_URL}\n\n{hashtags}"
            
            return title, description

        def create_diverse_image(prompt):
            encoded = urllib.parse.quote(prompt)
            timestamp = int(datetime.now().timestamp() * 1000)
            
            # ÇOK DAHA FAZLA rastgelelik için:
            random_component = random.randint(100000, 999999999)
            noise_factor = random.randint(1, 1000000)
            micro_timestamp = int(datetime.now().microsecond)
            
            prompt_hash = abs(hash(prompt + str(random_component)))
            
            # Mega seed kombinasyonu - her çalıştırmada farklı
            super_seed = (timestamp * random_component + noise_factor + micro_timestamp + prompt_hash) % 2147483647
            
            # Daha fazla boyut çeşitliliği
            size = random.choice([
                (1000, 1500), (1080, 1620), (1000, 1400),
                (1080, 1350), (1000, 1600), (1200, 1800),
                (800, 1200), (900, 1350), (1000, 1250)
            ])
            
            # Model parametresi ile (nano-banana yerine flux veya turbo)
            model = random.choice(['flux', 'flux-realism', 'flux-anime', 'flux-3d'])
            
            image_url = f"https://image.pollinations.ai/prompt/{encoded}?width={size[0]}&height={size[1]}&seed={super_seed}&nologo=true&enhance=true&model={model}"
            
            return image_url, super_seed

        def send_to_pinterest(image_url, title, description):
            event_name = IFTTT_EVENT
            ifttt_url = f"https://maker.ifttt.com/trigger/{event_name}/with/key/{IFTTT_KEY}"
            # IFTTT Pinterest mapping:
            # Value1 = Image URL
            # Value2 = Title
            # Value3 = Description
            payload = {
                "value1": image_url,      # Image URL
                "value2": title,          # Title (kısa başlık)
                "value3": description     # Description (uzun açıklama + link + hashtag)
            }
            
            for attempt in range(4):
                try:
                    r = session.post(ifttt_url, json=payload, timeout=20)
                    if r.status_code == 200:
                        return True
                    text = (r.text or '').lower()
                    if 'limit' in text or r.status_code in (429, 503):
                        sleep = (2 ** attempt) + random.random()
                        print(f"⚠️ IFTTT rate or service issue (status {r.status_code}). Backing off {sleep:.1f}s")
                        time.sleep(sleep)
                        continue
                    print(f"❌ IFTTT HTTP {r.status_code}: {r.text[:200]}")
                    return False
                except requests.RequestException as e:
                    sleep = (2 ** attempt) + random.random()
                    print(f"⚠️ Network error -> {e}. Retrying in {sleep:.1f}s")
                    time.sleep(sleep)
            return False

        def log_pin(entry):
            LOG_FILE = STATE_DIR / 'run.log'
            try:
                LOG_FILE.write_text((LOG_FILE.read_text() if LOG_FILE.exists() else '') + json.dumps(entry) + '\n')
            except Exception:
                pass

        def smart_posting_system():
            posted = load_posted()
            pins_to_post = calculate_safe_pin_count()
            if pins_to_post == 0:
                print('📌 Bugünlük limit dolu veya 0 pin. Çıkılıyor.')
                return
            print(f"🎯 Bu çalıştırmada paylaşılacak pin sayısı: {pins_to_post}")
            
            for i in range(pins_to_post):
                if i > 0:
                    wait_time = random.uniform(3, 12)
                    print(f"⏳ {wait_time:.1f}s bekleniyor")
                    time.sleep(wait_time)
                
                attempt = 0
                prompt = None
                while attempt < 8:
                    prompt, category = generate_unique_prompt()
                    checksum = str(abs(hash(prompt)))
                    if checksum not in posted:
                        posted.add(checksum)
                        break
                    attempt += 1
                
                if not prompt:
                    print('🔁 Benzersiz prompt bulunamadı, atlanıyor.')
                    continue
                
                print(f"📂 Kategori: {category} | Prompt checksum: {checksum[:8]}")
                image_url, seed = create_diverse_image(prompt)
                title, description = generate_unique_content(category)
                
                success = send_to_pinterest(image_url, title, description)
                entry = {"timestamp": datetime.now().isoformat(), "category": category, "seed": seed, "success": success}
                log_pin(entry)
                
                print(f"✅ Pin {'başarılı' if success else 'başarısız'}: {title}")
            
            save_posted(posted)

        def main():
            print('=== PINTEREST SAVINGS CONTENT ENGINE ===')
            print(datetime.now().isoformat())
            smart_posting_system()
            print('=== İŞLEM TAMAMLANDI ===')

        if __name__ == '__main__':
            main()
        PY

    - name: Upload logs & state as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pinterest-state-and-logs
        path: .pinterest_state

    - name: Summary Report
      if: success()
      run: |
        echo "================================"
        echo "📊 PINTEREST AUTOMATION REPORT"
        echo "================================"
        echo "✅ Görev tamamlandı"
        echo "💰 Tasarruf temalı içerikler oluşturuldu"
        echo "🎨 Text'siz, kaliteli görseller"
        echo "📈 Hesap sağlığı korunuyor"
        echo "================================"

    - name: Failure report
      if: failure()
      run: |
        echo "================================"
        echo "❌ PINTEREST AUTOMATION FAILURE"
        echo "Check artifacts: pinterest-state-and-logs"
        echo "================================"
